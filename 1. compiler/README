1. 编译过程

现在大多数程序员都是用IDE来完成整个编译过程。IDE提供了非常强大的功能，包含：错误检测、编译执行、断点调试等。然而对IDE的依赖会让我们忽略编译过程的底层细节，不了解程序是如何从源代码文件一步步被编译成可执行文件的过程及其原理，会让我们在写程序时充满了猜测；当遇到问题时，也很难能够快速定位和解决问题。

现在我们开始进入编程的魔法世界，了解程序是如何编译、链接以及执行的。在这个过程中，我们抛弃IDE，而是选择使用gcc，gcc是对cc1、as、ld等命令的一个封装。

首先，c/c++程序的编译过程一般包含如下四步：
- 预处理 (prepressing)
- 编译 (compilation)
- 汇编 (assembly)
- 链接 (linking)
最终，源代码文件被编译成可执行文件，能够被操作系统加载运行，去实现特定的功能。

1.1 预编译
命令： gcc -E hello.c -o hello.i
预编译过程主要处理源文件中以'#'开头的预编译指令：
- 将所有#define删除，并展开所有宏定义
- 处理所有的条件预编译指令，如#if，#ifdef，#elif，#else，#endif
- 处理#include指令，将被包含的文件插入到预编译指令的位置。#include会递归地将所有的引用文件导入
- 删除所有的注释信息
- 添加行号和文件名信息，以便调试器或当发生错误时告警使用
- 保留所有的#pragma指令，这种指令需要编译器来处理

1.2 编译
命令：gcc -S hello.i -o hello.s  或者  gcc -S hello.c -o hello.s  或者  cc1 hello.c -o hello.s
编译命令在预处理命令的基础上，对预处理文件进行更进一步的处理。主要包含：词法分析、语法分析、语义分析，并最后在优化之后生成汇编代码。

1.3 汇编
命令：gcc -c hello.s -o hello.o  或者  gcc -c hello.c -o hello.o  或者  as hello.s -o hello.o
汇编将汇编代码翻译成机器可以执行的机器码。相较于编译，这一步非常简单，就是一个简单的翻译过程，几乎每一条汇编指令都对应一条机器指令。

1.4 链接
命令：gcc hello.o -o hello  或者  gcc hello.c -o hello